// matrix.cpp

#include "matrix.h"

/**************************************************************************\
 * matrix::matrix                                                         *
\**************************************************************************/
matrix::matrix()
{
  m[ 0] = 1; m[ 1] = 0; m[ 2] = 0; m[ 3] = 0;
  m[ 4] = 0; m[ 5] = 1; m[ 6] = 0; m[ 7] = 0;
  m[ 8] = 0; m[ 9] = 0; m[10] = 1; m[11] = 0;
  m[12] = 0; m[13] = 0; m[14] = 0; m[15] = 1;
}

/**************************************************************************\
 * matrix::matrix                                                         *
\**************************************************************************/
matrix::matrix(const float *s)
{
  for (int i = 0; i < 16; i++) m[i] = s[i];
}

/**************************************************************************\
 * matrix::matrix                                                         *
\**************************************************************************/
matrix::matrix(const vec4 &v0, const vec4 &v1, const vec4 &v2, const vec4 &v3)
{
  m[ 0] = v0.x; m[ 1] = v1.x; m[ 2] = v2.x; m[ 3] = v3.x;
  m[ 4] = v0.y; m[ 5] = v1.y; m[ 6] = v2.y; m[ 7] = v3.y;
  m[ 8] = v0.z; m[ 9] = v1.z; m[10] = v2.z; m[11] = v3.z;
  m[12] = v0.w; m[13] = v1.w; m[14] = v2.w; m[15] = v3.w;
}

/**************************************************************************\
 * matrix::operator*                                                      *
\**************************************************************************/
vec4 matrix::operator*(const vec4 &v)
{
return vec4(v.x * m[ 0] + v.y * m[ 4] + v.z * m[ 8] + v.w * m[12],
            v.x * m[ 1] + v.y * m[ 5] + v.z * m[ 9] + v.w * m[13],
            v.x * m[ 2] + v.y * m[ 6] + v.z * m[10] + v.w * m[14],
            v.x * m[ 3] + v.y * m[ 7] + v.z * m[11] + v.w * m[15]);
}
/**************************************************************************\
 * matrix::operator                                                       *
\**************************************************************************/
vec3 matrix::operator*(const vec3 &v)
{
  vec4 ret = operator*(vec4(v.x, v.y, v.z, 1.0));
  ret /= ret.w;
  return vec3(ret.x, ret.y, ret.z);
}
